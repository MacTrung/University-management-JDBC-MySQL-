
CREATE DATABASE ;
USE `university`;

DROP TABLE IF EXISTS `accounts`;
CREATE TABLE `accounts` (
  `account_id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `role` enum('student','instructor') NOT NULL,
  `student_id` varchar(10) DEFAULT NULL,
  `instructor_id` varchar(10) DEFAULT NULL
) 


INSERT INTO `accounts` (`account_id`, `username`, `password`, `role`, `student_id`, `instructor_id`) VALUES
(2, 'admin', 'admin123', 'instructor', NULL, '1'),
(3, 'sinhvien1', 'sv123', 'student', '101', NULL);


DROP TABLE IF EXISTS `instructors`;
CREATE TABLE `instructors` (
  `instructor_id` varchar(10) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

INSERT INTO `instructors` (`instructor_id`, `name`, `email`) VALUES
('1', 'Le Van G', 'g.le@uni.edu');

DROP TABLE IF EXISTS `majors`;
CREATE TABLE `majors` (
  `major_id` varchar(10) NOT NULL,
  `major_name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

INSERT INTO `majors` (`major_id`, `major_name`) VALUES
('1', 'CNTT'),
('2', 'Kinh tế'),
('3', 'Kế toán');


DROP TABLE IF EXISTS `scores`;
CREATE TABLE `scores` (
  `student_id` varchar(10) NOT NULL,
  `subject_id` varchar(10) NOT NULL,
  `score` float DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


INSERT INTO `scores` (`student_id`, `subject_id`, `score`) VALUES
('101', '1', 8),
('101', '2', 7.5),
('102', '2', 9);


DROP TABLE IF EXISTS `students`;
CREATE TABLE `students` (
  `student_id` varchar(10) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  `major_id` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;



INSERT INTO `students` (`student_id`, `name`, `age`, `major_id`) VALUES
('101', 'Nguyen Van A', 20, '1'),
('102', 'Tran Thi B', 21, '2');


DROP TABLE IF EXISTS `subjects`;
CREATE TABLE `subjects` (
  `subject_id` varchar(10) NOT NULL,
  `subject_name` varchar(100) DEFAULT NULL,
  `credits` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

INSERT INTO `subjects` (`subject_id`, `subject_name`, `credits`) VALUES
('1', 'Java Programming', 3),
('2', 'Database Systems', 3);

ALTER TABLE `accounts`
  ADD PRIMARY KEY (`account_id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD KEY `student_id` (`student_id`),
  ADD KEY `instructor_id` (`instructor_id`);

ALTER TABLE `instructors`
  ADD PRIMARY KEY (`instructor_id`);

ALTER TABLE `majors`
  ADD PRIMARY KEY (`major_id`);

ALTER TABLE `scores`
  ADD PRIMARY KEY (`student_id`,`subject_id`),
  ADD KEY `subject_id` (`subject_id`);

ALTER TABLE `students`
  ADD PRIMARY KEY (`student_id`),
  ADD KEY `major_id` (`major_id`);

ALTER TABLE `subjects`
  ADD PRIMARY KEY (`subject_id`);

ALTER TABLE `accounts`
  MODIFY `account_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

ALTER TABLE `accounts`
  ADD CONSTRAINT `accounts_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `students` (`student_id`),
  ADD CONSTRAINT `accounts_ibfk_2` FOREIGN KEY (`instructor_id`) REFERENCES `instructors` (`instructor_id`);

ALTER TABLE `scores`
  ADD CONSTRAINT `scores_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `students` (`student_id`),
  ADD CONSTRAINT `scores_ibfk_2` FOREIGN KEY (`subject_id`) REFERENCES `subjects` (`subject_id`);

ALTER TABLE `students`
  ADD CONSTRAINT `students_ibfk_1` FOREIGN KEY (`major_id`) REFERENCES `majors` (`major_id`);
COMMIT;

DELIMITER //

CREATE PROCEDURE AuthenticateUser(
    IN p_username VARCHAR(50),
    IN p_password VARCHAR(50),
    OUT p_role ENUM('student', 'instructor'),
    OUT p_related_id VARCHAR(10)
)
BEGIN
    SELECT
        a.role,
        CASE
            WHEN a.role = 'student' THEN a.student_id
            WHEN a.role = 'instructor' THEN a.instructor_id
            ELSE NULL
        END INTO p_role, p_related_id
    FROM accounts a
    WHERE a.username = p_username AND a.password = p_password;
END //

DELIMITER ;

-- gọi:
-- CALL AuthenticateUser('sinhvien1', 'sv123', @user_role, @user_id);
-- SELECT @user_role, @user_id;
-- CALL AuthenticateUser('admin', 'admin123', @admin_role, @admin_id);
-- SELECT @admin_role, @admin_id;

DELIMITER //

CREATE PROCEDURE AddNewStudent(
    IN p_student_id VARCHAR(10),
    IN p_student_name VARCHAR(100),
    IN p_student_age INT,
    IN p_major_id VARCHAR(10),
    IN p_username VARCHAR(50),
    IN p_password VARCHAR(50)
)
BEGIN

    START TRANSACTION;

    -- Thêm vào bảng students
    INSERT INTO students (student_id, name, age, major_id)
    VALUES (p_student_id, p_student_name, p_student_age, p_major_id);

    -- Thêm vào bảng accounts
    INSERT INTO accounts (username, password, role, student_id, instructor_id)
    VALUES (p_username, p_password, 'student', p_student_id, NULL);

    -- Kiểm tra lỗi và commit/rollback
    IF @@ERROR_COUNT = 0 THEN
        COMMIT; -- Nếu không có lỗi, lưu thay đổi
    ELSE
        ROLLBACK; -- Nếu có lỗi, hủy bỏ tất cả thay đổi
        SELECT 'Lỗi: Không thể thêm sinh viên và tài khoản.' AS Message;
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE AddNewInstructor(
    IN p_instructor_id VARCHAR(10),
    IN p_instructor_name VARCHAR(100),
    IN p_instructor_email VARCHAR(100),
    IN p_account_password VARCHAR(50)  
)
BEGIN
    START TRANSACTION;

    INSERT INTO instructors (instructor_id, name, email)
    VALUES (p_instructor_id, p_instructor_name, p_instructor_email);

    INSERT INTO accounts (username, password, role, student_id, instructor_id)
    VALUES (p_instructor_email, p_account_password, 'instructor', NULL, p_instructor_id);

    IF @@ERROR_COUNT = 0 THEN
        COMMIT;
    ELSE
        ROLLBACK;
        SELECT 'Lỗi: Không thể thêm giảng viên và tài khoản.' AS Message;
    END IF;

END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE GetStudentAverageScore(
    IN p_student_id VARCHAR(10),
    OUT p_average_score FLOAT
)
BEGIN
    SELECT AVG(score)
    INTO p_average_score
    FROM scores
    WHERE student_id = p_student_id;
END //

DELIMITER ;
